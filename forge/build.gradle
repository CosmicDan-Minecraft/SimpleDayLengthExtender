plugins {
    id 'com.github.johnrengelman.shadow'
}

apply from: '../modprops.gradle'
//base { archivesName = "$rootProject.archives_name-$project.name" }
base { archivesName = project.archives_base_name }
version = project.mod_version + "-Forge-${rootProject.minecraft_version}"
group = project.maven_group

loom {
    forge {
        mixinConfig "simpledaylengthextender.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    // MixinExtras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.6"))
    
    // TerraFirmaCraft 3.2.5
    modCompileOnly("curse.maven:terrafirmacraft-302973:5478226")
    // - Runtime-enabled alternative for testing
    //modImplementation("curse.maven:terrafirmacraft-302973:5478226")
    //modImplementation("vazkii.patchouli:Patchouli:1.20.1-84-FORGE")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
    //Old, might still be needed...?
    //dependsOn shadowJar
    archiveClassifier = null
}

// Extras from CosmicDan, check if these are still needed...

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
